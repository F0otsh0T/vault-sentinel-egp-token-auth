################################################
# Sentinel EGP Policy Goals:
#  - Allow Read: egpkvv2/data/egpvaultkv01
#  - Deny Read: egpkvv2/data/egpvaultkv02
#  - Deny Operation: delete
#  - Prevent KV v1 Secret Engine Creation

################################################
# Import Libraries / Modules / Plugins
import "strings"
import "json"
# import "tfrun"
# import "name"
# import "calendar"
# import "vault"

################################################
# Capture the path being accessed
path = request.path
data = request.data
operation = request.operation
token_path = token.path

################################################
# DEBUG / PRINT
print("Namespace path:", namespace.path)
print("Request path:", request.path)
print("Request data:", request.data)
print("Request type:", request.data.type)
print("Request operation:", request.operation)
print("Token path:", token.path)

################################################
# PREVENT KV V1 SECRETS ENGINE
# https://github.com/hashicorp/vault-guides/blob/master/governance/sentinel/prevent-kv-v1-engines.sentinel

# Function that validates the request is related to mounting kv secret engines
prevent_kv_v1_engines = func() {

  ## Print some information about the request
  # print("Namespace path:", namespace.path)
  # print("Request path:", request.path)
  # print("Request data:", request.data)
  # print("Request type:"), request.data.type)
  # print("Request operation:", request.operation)
  # print("Token path:", token.path)

  # Validate that path includes sys/mounts
  if request.path matches "^(.*)sys\\/mounts\\/(.*)$" and
     ("type" in keys(request.data) and request.data.type is "kv") and
     request.operation in ["create", "update"] {
    print("type of secrets engine:", request.data.type)
    if (request.data.options else null is null) or 
       ("version" in keys(request.data.options) and request.data.options.version is "1") {
      print("The version of the KV secrets engine is 1 which is not allowed.")
      print("Please set version to 2 or create engine with type kv-v2")
      return false
    }
    return true
  }
  return true
}

secrets_engines_validated = prevent_kv_v1_engines()

################################################
# LOGIC: Apply in Function
# Match Sentinel EGP Policy Goals

test_func = func() {

  # Print some information about the request
  # print("Namespace path:", namespace.path)
  # print("Request path:", request.path)
  # print("Request data:", request.data)
  # print("Request type:", request.data.type)
  # print("Request operation:", request.operation)
  # print("Token path:", token.path)

  #
  if request.operation in ["create", "read", "update", "delete", "list"] and
    strings.has_prefix(request.path, "egpkvv2/") {
      # print("Request operation:", request.operation)
      # print("Request path:", request.path)
      # print("Request data:", request.data)
      # print("Request type:", request.data.type)
    if request.operation == "read" and
      request.path == "egpkvv2/data/egpvaultkv01" {
        print("Allow read access to secret/data/egpvaultkv01")
        return true
      }
    if request.operation == "read" and
      request.path == "egpkvv2/data/egpvaultkv02" {
        print("Deny read access to secret/data/egpvaultkv02")
        return false
      }
    if request.operation in ["create", "delete"] {
      print("Deny other CRUD operations")
      return false
    }
    return true
  }
  return true
}

test_rule = test_func()

main = rule {
  test_rule and
  secrets_engines_validated
}

################################################
# LOGIC: Apply in Main Rule
# Match Sentinel EGP Policy Goals

# Operations
# `read` operation
ops_read = strings.has_prefix(request.operation, "read")
# `delete` operation
ops_delete = request.operation in ["delete"]
# `update` operation
ops_update = request.operation in ["update"]

# Check if we're accessing the KV v2 data path - must be correctly set in main rule for proper evaluation
# Note: KV v2 uses "data" subpath for actual secret access
allow_kv_path = strings.has_prefix(path, "egpkvv2/data/egpvaultkv01")
deny_kv_path = strings.has_prefix(path, "egpkvv2/data/egpvaultkv02")

# Check Preconditions - main rule will not apply unless this precondition is met 
precond = rule {
    request.operation in ["create", "read", "update", "delete", "list"] and
    # request.operation in ["read"] and
    strings.has_prefix(request.path, "egpkvv2/")
}

# Set denial message
# messages = {}
# if ops_read && deny_kv_path {
#     messages["error"] = "Read access to secret/data/egpvaultkv02 is restricted by policy."
# }

# # Main policy
# main = rule when {
#     ops_read && deny_kv_path
# } then {
#     false with messages
# } else {
#     true
# }

# Allow read access to the specific path
# main = rule when precond {
#   ## 
#   ops_read and
#   allow_kv_path and
#   !(deny_kv_path) and
#   !(ops_delete) and
#   secrets_engines_validated or
#   ##
#   ops_update and
#   !(ops_delete) and
#   secrets_engines_validated
# }




